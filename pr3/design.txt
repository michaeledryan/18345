18-491 Project 3

mnye  Michael Nye
mer1  Michael Ryan


a. 
  We used the frontend protocol to handle link-state advertisement. The machine with the lower UUID sends a special HTTP request to its neighbor, which then maintains the TCP connection indefinitely with a Neighbor class that listens to link-state updates from a specific neighbor.
  There is a timeout on the connection after which the neighbor is considered dead. Additionally, closing the TCP connection (gracefully or otherwise) is considered to be peer death.
  To prevent accidental peer death, keep-alive messages are sent three times per timeout period. These include no link-state data.
  In case of disconnect, it falls to the peer with the lower UUID to reconnect. Reconnect requests are made periodically until success. Higher UUIDs wait for reconnection requests.
  

b. To update the link state, messages are sent and propagated on any change to the network. Messages are generated by a network node whenever its own link state changes, either by user input (peer/addneighbor/, etc.)  or by network connections/disconnections. These flood the network and are limited by checking the path vector. Poisoned reverse is used in case of disconnects.
  Priority selection is performed with a static metric (entered in config files or peer/addneighbor requests) and an adjacency table for the network graph using these metrics. When a path is requested, we use Dijkstra's algorithm to return the shortest path to all nodes with the requested file.
  Unreachable nodes are also pruned automatically.

c. Gson 2.2.2, a JSON library from Google. Available: https://code.google.com/p/google-gson/
  Included with source files.

d. Short settling time
  TCP disconnects happen as soon as the neighbor dies, so we flood the network immediately with the change. We implement poisoned reverse to broadcast a downed link in a single packet. Only te state of a single edge has to be advertised at one time in order to update the link state of each of our network nodes. The end result is almost immediate updating with a very small number of packets. 

e. To compile, run
  >> ant
  To clean, run
  >> ant clean

  To run, run
  >> java edu.cmu.ece.VodServer [-c node.conf] [frontendPort backendPort]

  With node.conf structured as in the handout.
