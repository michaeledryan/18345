Notes for project 2:

Essentially, it seems like we need to let make our server work with other servers. Now, we essentially have two servers: the backend one that will listen on port B, and the frontend one that will listen on port A.

2.3.1: 
  We need to be able to parse the URI and then store a link to another server for that information.
  I don't think this requires any backend communication - we essentially add something to a map of paths ==> /hostnames/ports/bitrates?

  I suppose a new request with the same content and a new host overwrites the old one.

2.3.2
  
  This actually talks to the other server; one which is specified in the previous path URI.
  We basically check our mapping of paths to other servers, request something (we can do the request quite easily in Java terms either through Remote Method Invocation or a fairly hacky JSON-based communication system that I put together for a 214 project).

  I'm curious how the bitrate plays into this.

2.3.3

  This limits the back-end transfer rate from this server to other servers. Nothing to do with frontend directly, and it doesn't seem too bad... Java probably has ways of limiting its file transfer rate.

2.3.4

  Optional!

  Also... the same as the required 2.3.3? We should ask about this in class. 


2.4

  Back end transport subsystem

  Built on UDP
  Only listens on one port, even if talking to multiple clients
    Didn't we do this already?
  Can endure 5% packet loss
    Not sure what this means... I think Java might take care of it
  Stays within the set bandwidth limit
    So we need some form of communication between concurrent server threads.
    Maybe every time we clear a buffer, read the number of threads transmitting and adjust the transmission rate accordingly?
  Content chunking
    Seems like multiplexing... my guess is that Java will also handle this.


3.

  Maybe we optimize this to transmit Ogg streams? I'm not sure what that would entail.

4.1 Checkpoint

  Seems like we should jsut fix up the old server, and start on the ideas for the backend stuff. I might be booked on this until late Tuesday, but it doesn't look bad.

  Also, we should pick what things we want. I'm fairly certain our HTTP server can handle regular webpages, but the only dynamic web stuff I've done has been with node.js, which might be different. Maybe we'll get freebies on the other stuff!